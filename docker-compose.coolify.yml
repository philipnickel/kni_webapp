services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-kni_webapp}
      POSTGRES_USER: ${DATABASE_USER:-kni_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-kni_secure_password}
      POSTGRES_HOST_AUTH_METHOD: ${DATABASE_AUTH_METHOD:-md5}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-kni_user} -d ${DATABASE_NAME:-kni_webapp}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli ${REDIS_PASSWORD:+-a $REDIS_PASSWORD} ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      target: production
    restart: unless-stopped
    expose:
      - 8000
    environment:
      ROLE: web
      DJANGO_SETTINGS_MODULE: project.settings
      # Rely on Django's fallback secret key for preview deployments.
      # Production deployments should explicitly set DJANGO_SECRET_KEY
      # via the service's environment configuration in Coolify.
      DEBUG: ${DEBUG:-False}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-}
      
      # Coolify domain configuration
      SERVICE_FQDN_WEB_8000: ${SERVICE_FQDN_WEB:-}

      DATABASE_URL: postgresql://${DATABASE_USER:-kni_user}:${DATABASE_PASSWORD:-kni_secure_password}@db:5432/${DATABASE_NAME:-kni_webapp}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0

      WAGTAILADMIN_BASE_URL: ${WAGTAILADMIN_BASE_URL:-http://localhost:8000}
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-True}

      # Email Configuration
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:-}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:-}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@example.com}

      # Performance Settings
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-2}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-60}
      GUNICORN_MAX_REQUESTS: ${GUNICORN_MAX_REQUESTS:-1000}
      GUNICORN_MAX_REQUESTS_JITTER: ${GUNICORN_MAX_REQUESTS_JITTER:-100}

      # Automatic baseline loading for fresh deployments
      LOAD_BASELINE: true
      
      SEED_TENANT_DATA: ${SEED_TENANT_DATA:-false}
      TENANT_SCHEMA: ${TENANT_SCHEMA:-}
      TENANT_HOSTNAME: ${TENANT_HOSTNAME:-}
      TENANT_PORT: ${TENANT_PORT:-80}
      TENANT_ADMIN_USER: ${TENANT_ADMIN_USER:-admin}
      TENANT_ADMIN_PASSWORD: ${TENANT_ADMIN_PASSWORD:-admin123}
      TENANT_ADMIN_EMAIL: ${TENANT_ADMIN_EMAIL:-admin@example.com}

    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
