#!/bin/bash
set -e

# =============================================================================
# Dokploy Application Deployment Script
# =============================================================================
# This script configures and deploys the Django/Wagtail application in
# Dokploy Application mode (not Compose mode) for optimal compatibility
# =============================================================================

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${GREEN}üöÄ Dokploy Application Deployment Configuration${NC}"
echo -e "${BLUE}================================================${NC}"

# Check if we're in the right directory
if [ ! -f "deployment/Dockerfile" ]; then
    echo -e "${RED}‚ùå Error: Please run this script from the project root directory${NC}"
    echo -e "${RED}   Expected to find: deployment/Dockerfile${NC}"
    exit 1
fi

echo -e "${YELLOW}üìã Dokploy Application Configuration:${NC}"
echo ""
echo -e "${BLUE}1. Deployment Type:${NC} Application (not Compose)"
echo -e "${BLUE}2. Build Configuration:${NC}"
echo "   - Dockerfile: deployment/Dockerfile"
echo "   - Context: . (project root)"
echo "   - Target: production"
echo "   - Port: 80"
echo ""
echo -e "${BLUE}3. Required Environment Variables:${NC}"
echo "   üîë DJANGO_SECRET_KEY (auto-generated if not set)"
echo "   üîë DATABASE_PASSWORD (for PostgreSQL)"
echo "   üîë REDIS_PASSWORD (for Redis)"
echo "   üåê DOMAIN (your deployment domain)"
echo "   üìß ADMIN_EMAIL (admin user email)"
echo "   üîí ADMIN_PASSWORD (admin user password)"
echo ""
echo -e "${BLUE}4. Database Configuration:${NC}"
echo "   DATABASE_URL: postgresql://kni_user:\${{project.DATABASE_PASSWORD}}@postgres:5432/kni_webapp"
echo ""
echo -e "${BLUE}5. Redis Configuration:${NC}"
echo "   REDIS_URL: redis://:\${{project.REDIS_PASSWORD}}@redis:6379/0"
echo ""
echo -e "${BLUE}6. Health Check:${NC}"
echo "   - Path: /ready"
echo "   - Interval: 30s"
echo "   - Timeout: 10s"
echo "   - Start Period: 90s (allows container initialization)"
echo "   - Retries: 3"
echo ""

echo -e "${GREEN}‚úÖ Manual Steps to Complete in Dokploy UI:${NC}"
echo ""
echo -e "${YELLOW}STEP 1: Create New Application${NC}"
echo "1. In Dokploy dashboard, click 'New Application'"
echo "2. Choose 'Application' (NOT Compose)"
echo "3. Set Repository: https://github.com/philipnickel/kni_webapp.git"
echo "4. Set Branch: main"
echo ""
echo -e "${YELLOW}STEP 2: Build Configuration${NC}"
echo "1. Dockerfile Path: deployment/Dockerfile"
echo "2. Build Context: . (project root)"
echo "3. Build Target: production"
echo "4. Port: 80"
echo ""
echo -e "${YELLOW}STEP 3: Environment Variables${NC}"
echo "Set these in Dokploy Environment tab:"
echo "  DJANGO_SECRET_KEY=\$(Generate 50-char random string)"
echo "  DATABASE_PASSWORD=\$(Generate secure password)"
echo "  REDIS_PASSWORD=\$(Generate secure password)"
echo "  DOMAIN=jcleemannbyg.dk"
echo "  ADMIN_EMAIL=admin@jcleemannbyg.dk"
echo "  ADMIN_PASSWORD=\$(Generate admin password)"
echo "  DOKPLOY_DEPLOYMENT=true"
echo ""
echo -e "${YELLOW}STEP 4: Services Configuration${NC}"
echo "Add these services in Dokploy:"
echo ""
echo "PostgreSQL Service:"
echo "  - Image: postgres:15-alpine"
echo "  - Environment Variables:"
echo "    POSTGRES_DB=kni_webapp"
echo "    POSTGRES_USER=kni_user"
echo "    POSTGRES_PASSWORD=\${DATABASE_PASSWORD}"
echo "  - Volume: postgres_data ‚Üí /var/lib/postgresql/data"
echo ""
echo "Redis Service:"
echo "  - Image: redis:7-alpine"
echo "  - Command: redis-server --appendonly yes --requirepass \${REDIS_PASSWORD}"
echo "  - Volume: redis_data ‚Üí /data"
echo ""
echo -e "${YELLOW}STEP 5: Domain Configuration${NC}"
echo "1. Set Domain: jcleemannbyg.dk"
echo "2. Enable HTTPS/Let's Encrypt"
echo "3. Certificate Resolver: letsencrypt"
echo ""
echo -e "${YELLOW}STEP 6: Deploy${NC}"
echo "1. Click 'Deploy Application'"
echo "2. Monitor logs for any issues"
echo "3. Wait for health checks to pass (up to 90 seconds)"
echo ""

echo -e "${GREEN}üîç Troubleshooting 502 Errors:${NC}"
echo ""
echo -e "${BLUE}1. Check Application Logs:${NC}"
echo "   - Look for supervisor startup messages"
echo "   - Verify both Caddy and Gunicorn start successfully"
echo "   - Check for database connection errors"
echo ""
echo -e "${BLUE}2. Verify Health Checks:${NC}"
echo "   - Test: curl http://container-ip:80/ready"
echo "   - Should return 'OK' status"
echo ""
echo -e "${BLUE}3. Network Connectivity:${NC}"
echo "   - Ensure Traefik can reach container on port 80"
echo "   - Verify Docker Swarm service is running"
echo ""
echo -e "${BLUE}4. Environment Variables:${NC}"
echo "   - Verify DATABASE_URL format"
echo "   - Check REDIS_URL format"
echo "   - Ensure DJANGO_SECRET_KEY is set"
echo ""
echo -e "${BLUE}5. Service Dependencies:${NC}"
echo "   - PostgreSQL service must be healthy"
echo "   - Redis service must be healthy"
echo "   - Check service discovery names (postgres, redis)"
echo ""

echo -e "${GREEN}üéØ Key Differences from Docker Compose:${NC}"
echo ""
echo "‚ùå DON'T use docker-compose.dokploy.yml (that's for Compose mode)"
echo "‚úÖ DO use Application mode with Dockerfile"
echo "‚ùå DON'T try to override the Dockerfile command"
echo "‚úÖ DO let the Dockerfile handle the full stack (Caddy + Gunicorn)"
echo "‚ùå DON'T expose multiple ports"
echo "‚úÖ DO expose only port 80 (Caddy handles routing)"
echo ""

echo -e "${YELLOW}üìù Generated Configuration Files:${NC}"
echo "‚úÖ dokploy-application.json - Reference configuration"
echo "‚úÖ Dockerfile improvements - Better health checks"
echo "‚úÖ supervisord.conf - Optimized Gunicorn settings"
echo "‚úÖ entrypoint.sh - Dokploy compatibility improvements"
echo ""

echo -e "${GREEN}üéâ Configuration complete! Follow the manual steps above in Dokploy UI.${NC}"