# =============================================================================
# Simplified Docker Compose Configuration
# Single file for both development and production
# Use environment variables to switch between modes
# =============================================================================

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-kni_webapp}
      POSTGRES_USER: ${DATABASE_USER:-kni_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-kni_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/app/backups
    ports:
      - "${DATABASE_EXPOSE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-kni_user} -d ${DATABASE_NAME:-kni_webapp}"]
      interval: ${DB_HEALTH_INTERVAL:-10s}
      timeout: ${DB_HEALTH_TIMEOUT:-5s}
      retries: 5
      start_period: ${DB_HEALTH_START_PERIOD:-10s}

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_EXPOSE_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${REDIS_HEALTH_INTERVAL:-10s}
      timeout: ${REDIS_HEALTH_TIMEOUT:-5s}
      retries: 5
      start_period: ${REDIS_HEALTH_START_PERIOD:-5s}

  web:
    build:
      context: .
      target: ${DOCKER_TARGET:-production}
    restart: unless-stopped
    ports:
      - "${WEB_EXPOSE_PORT:-8000}:80"
    environment:
      # Core Django settings
      DJANGO_SETTINGS_MODULE: project.settings
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-secret-key-not-for-production}
      DEBUG: ${DEBUG:-False}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0,72.60.81.210}
      
      # Database and Redis
      DATABASE_URL: postgresql://${DATABASE_USER:-kni_user}:${DATABASE_PASSWORD:-kni_secure_password}@db:5432/${DATABASE_NAME:-kni_webapp}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      
      # Development vs Production
      DEVELOPMENT_COMMAND: ${DEVELOPMENT_COMMAND:-python manage.py runserver 0.0.0.0:8000}
      PRODUCTION_COMMAND: ${PRODUCTION_COMMAND:-gunicorn project.wsgi:application --bind 0.0.0.0:8000}
      
      # Optional settings
      LOAD_BASELINE: ${LOAD_BASELINE:-false}
      WAGTAILADMIN_BASE_URL: ${WAGTAILADMIN_BASE_URL:-http://72.60.81.210:8000}
      
    volumes:
      # Only mount essential volumes for production
      - ./media:/app/media:${VOLUME_MODE:-rw}
      - ./logs:/app/logs
      - ./backups:/app/backups
      
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
        
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health/ready/"]
      interval: ${WEB_HEALTH_INTERVAL:-30s}
      timeout: ${WEB_HEALTH_TIMEOUT:-10s}
      retries: 3
      start_period: ${WEB_HEALTH_START_PERIOD:-120s}
      
    # Command selection based on environment
    command: >
      sh -c "
        /entrypoint.sh
        if [ '${DEBUG:-True}' = 'True' ]; then
          exec ${DEVELOPMENT_COMMAND:-python manage.py runserver 0.0.0.0:8000}
        else
          exec ${PRODUCTION_COMMAND:-gunicorn project.wsgi:application --bind 0.0.0.0:8000}
        fi
      "

volumes:
  postgres_data:
  redis_data:
