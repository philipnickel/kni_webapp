name: Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=project.settings_test" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        python manage.py migrate --settings=project.settings_test

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput --settings=project.settings_test

    - name: Run test suite
      run: |
        python test_runner.py --parallel
      continue-on-error: true

    - name: Generate coverage report
      run: |
        python -m coverage xml
        python -m coverage html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./claude-tests/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: claude-tests/htmlcov/

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.txt
          claude-tests/coverage.xml

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install bandit safety

    - name: Run security checks with bandit
      run: |
        bandit -r apps/ -f json -o security-report.json || true

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          security-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run performance tests
      run: |
        python test_runner.py --category performance --verbose
      env:
        DJANGO_SETTINGS_MODULE: project.settings_test
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t jcleemannbyg:test .

    - name: Run Docker tests
      run: |
        docker-compose -f docker-compose.local.yml up -d db redis
        sleep 10
        docker-compose -f docker-compose.local.yml run --rm web pip install -r requirements-test.txt
        docker-compose -f docker-compose.local.yml run --rm web python test_runner.py --no-coverage
        docker-compose -f docker-compose.local.yml down

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run black (code formatting check)
      run: |
        black --check --diff .

    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff .

    - name: Run flake8 (linting)
      run: |
        flake8 --max-line-length=88 --extend-ignore=E203,W503 .

  summary:
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: always()

    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Tests failed"
          exit 1
        fi

        if [ "${{ needs.lint.result }}" != "success" ]; then
          echo "❌ Linting failed"
          exit 1
        fi

        echo "✅ All checks passed!"

    - name: Post summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed reports in the Actions artifacts."