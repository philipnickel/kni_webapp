#!/usr/bin/env python
"""
Fix Johann's tenant schema by creating missing Wagtail core tables
"""
import os
import sys
import django

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from django_tenants.utils import schema_context
from django.db import connection
from django.core.management import call_command

def fix_johann_wagtail():
    """Create missing Wagtail tables in Johann's tenant schema"""
    print("üîß Fixing Johann's Wagtail admin by creating missing tables...")
    
    with schema_context('johann'):
        with connection.cursor() as cursor:
            # Check what tables exist
            cursor.execute("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'johann' 
                ORDER BY table_name;
            """)
            existing_tables = [row[0] for row in cursor.fetchall()]
            print(f"üìã Found {len(existing_tables)} existing tables in Johann schema")
            
            # Check if wagtailcore_page exists and has all required columns
            if 'wagtailcore_page' not in existing_tables:
                print("‚ùå wagtailcore_page missing - creating Wagtail core tables...")
                
                # Create wagtailcore_locale first (required by page)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS wagtailcore_locale (
                        id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        language_code VARCHAR(12) NOT NULL UNIQUE
                    );
                """)
                
                # Insert default locale
                cursor.execute("""
                    INSERT INTO wagtailcore_locale (language_code)
                    SELECT 'da' 
                    WHERE NOT EXISTS (SELECT 1 FROM wagtailcore_locale WHERE language_code = 'da');
                """)
                
                # Create wagtailcore_collection
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS wagtailcore_collection (
                        id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        path VARCHAR(255) NOT NULL UNIQUE,
                        depth INTEGER NOT NULL CHECK (depth >= 0),
                        numchild INTEGER NOT NULL CHECK (numchild >= 0),
                        name VARCHAR(255) NOT NULL
                    );
                """)
                
                # Insert root collection
                cursor.execute("""
                    INSERT INTO wagtailcore_collection (path, depth, numchild, name)
                    SELECT '0001', 1, 0, 'Root'
                    WHERE NOT EXISTS (SELECT 1 FROM wagtailcore_collection WHERE path = '0001');
                """)
                
                # Get collection and locale IDs
                cursor.execute("SELECT id FROM wagtailcore_collection WHERE path = '0001'")
                collection_id = cursor.fetchone()[0]
                
                cursor.execute("SELECT id FROM wagtailcore_locale WHERE language_code = 'da'")
                locale_id = cursor.fetchone()[0]
                
                # Create wagtailcore_page with all required columns
                cursor.execute(f"""
                    CREATE TABLE IF NOT EXISTS wagtailcore_page (
                        id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        path VARCHAR(255) NOT NULL UNIQUE,
                        depth INTEGER NOT NULL CHECK (depth >= 0),
                        numchild INTEGER NOT NULL CHECK (numchild >= 0),
                        title VARCHAR(255) NOT NULL,
                        slug VARCHAR(255),
                        content_type_id INTEGER NOT NULL,
                        live BOOLEAN NOT NULL DEFAULT TRUE,
                        has_unpublished_changes BOOLEAN NOT NULL DEFAULT FALSE,
                        url_path TEXT NOT NULL,
                        owner_id INTEGER,
                        seo_title VARCHAR(255),
                        show_in_menus BOOLEAN NOT NULL DEFAULT FALSE,
                        search_description TEXT,
                        go_live_at TIMESTAMP WITH TIME ZONE,
                        expire_at TIMESTAMP WITH TIME ZONE,
                        expired BOOLEAN NOT NULL DEFAULT FALSE,
                        locked BOOLEAN NOT NULL DEFAULT FALSE,
                        locked_at TIMESTAMP WITH TIME ZONE,
                        locked_by_id INTEGER,
                        first_published_at TIMESTAMP WITH TIME ZONE,
                        last_published_at TIMESTAMP WITH TIME ZONE,
                        latest_revision_id INTEGER,
                        live_revision_id INTEGER,
                        alias_of_id INTEGER,
                        locale_id INTEGER NOT NULL DEFAULT {locale_id} REFERENCES wagtailcore_locale(id),
                        translation_key UUID,
                        draft_title VARCHAR(255),
                        latest_revision_created_at TIMESTAMP WITH TIME ZONE,
                        wagtail_admin_comments TEXT,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    );
                """)
                
                # Create wagtailcore_site
                cursor.execute(f"""
                    CREATE TABLE IF NOT EXISTS wagtailcore_site (
                        id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        hostname VARCHAR(255) NOT NULL,
                        port INTEGER NOT NULL,
                        site_name VARCHAR(255),
                        root_page_id INTEGER REFERENCES wagtailcore_page(id),
                        is_default_site BOOLEAN NOT NULL DEFAULT FALSE
                    );
                """)
                
                # Create content type for Wagtail Page
                cursor.execute("""
                    INSERT INTO django_content_type (app_label, model) 
                    SELECT 'wagtailcore', 'page'
                    WHERE NOT EXISTS (
                        SELECT 1 FROM django_content_type 
                        WHERE app_label = 'wagtailcore' AND model = 'page'
                    );
                """)
                
                # Get page content type ID
                cursor.execute("""
                    SELECT id FROM django_content_type 
                    WHERE app_label = 'wagtailcore' AND model = 'page';
                """)
                page_content_type_id = cursor.fetchone()[0]
                
                # Create root page
                cursor.execute(f"""
                    INSERT INTO wagtailcore_page (
                        path, depth, numchild, title, slug, content_type_id, 
                        url_path, locale_id
                    )
                    SELECT '0001', 1, 0, 'Root', 'root', {page_content_type_id}, '/', {locale_id}
                    WHERE NOT EXISTS (SELECT 1 FROM wagtailcore_page WHERE path = '0001');
                """)
                
                print("‚úÖ Created wagtailcore_page table")
                print("‚úÖ Created wagtailcore_site table") 
                print("‚úÖ Created wagtailcore_collection table")
                print("‚úÖ Created wagtailcore_locale table")
                print("‚úÖ Inserted root page")
            else:
                print("‚úÖ wagtailcore_page already exists - checking for missing columns...")
                
                # Check for missing columns and add them
                cursor.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_schema = 'johann' AND table_name = 'wagtailcore_page'
                    ORDER BY column_name;
                """)
                existing_columns = [row[0] for row in cursor.fetchall()]
                print(f"üìã Found {len(existing_columns)} columns in wagtailcore_page")
                
                # Add missing columns
                missing_columns = {
                    'latest_revision_created_at': 'TIMESTAMP WITH TIME ZONE',
                    'wagtail_admin_comments': 'TEXT',
                    'created_at': 'TIMESTAMP WITH TIME ZONE DEFAULT NOW()',
                    'updated_at': 'TIMESTAMP WITH TIME ZONE DEFAULT NOW()'
                }
                
                for column_name, column_type in missing_columns.items():
                    if column_name not in existing_columns:
                        print(f"‚ûï Adding missing column: {column_name}")
                        cursor.execute(f"""
                            ALTER TABLE wagtailcore_page 
                            ADD COLUMN IF NOT EXISTS {column_name} {column_type};
                        """)
                    else:
                        print(f"‚úÖ Column {column_name} already exists")
            
            # Verify tables exist
            cursor.execute("""
                SELECT COUNT(*) FROM wagtailcore_page;
            """)
            page_count = cursor.fetchone()[0]
            print(f"üìä Johann schema has {page_count} pages")
            
    print("\nüéâ Johann's Wagtail admin should now work!")
    print("üåê Try accessing: http://johann.localhost:8004/admin/")
    return True

if __name__ == '__main__':
    try:
        fix_johann_wagtail()
        print("\n‚ú® Johann's Wagtail admin is ready!")
        print("üìù Login: admin / admin123")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()