# =============================================================================
# Development-specific Docker Compose Configuration
# Use this with: docker compose -f docker-compose.yml -f docker-compose.dev.yml
# =============================================================================

services:
  web:
    # Development port mapping - remove explicit IP binding
    ports:
      - "${WEB_EXPOSE_PORT:-9000}:8000"

    # Development environment variables
    environment:
      DEVELOPMENT_COMMAND: python manage.py runserver 0.0.0.0:8000

    # Additional volumes for development - preserve built static files
    volumes:
      # Mount source code for live reloading
      - ./apps:/app/apps
      - ./templates:/app/templates
      - ./project:/app/project
      - ./manage.py:/app/manage.py
      - ./static:/app/static:ro  # Read-only to prevent conflicts
      - ./logs:/app/logs
      - ./backups:/app/backups

    # Development healthcheck - check Django dev server on port 8000
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Development networks - only use default network (no dokploy-network)
    networks:
      - default

    # Use development command from environment variable
    command: >
      sh -c "
        /entrypoint.sh
        exec ${DEVELOPMENT_COMMAND:-python manage.py runserver 0.0.0.0:8000}
      "

# Development networks - override to exclude dokploy-network
networks:
  default:
    name: ${NETWORK_NAME:-kni_webapp_dev_network}