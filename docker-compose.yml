# Production-ready Docker Compose for KNI Webapp
# Suitable for Coolify deployment and local development

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-kni_webapp}
      POSTGRES_USER: ${DATABASE_USER:-kni_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-kni_secure_password}
      POSTGRES_HOST_AUTH_METHOD: ${DATABASE_AUTH_METHOD:-md5}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-kni_user} -d ${DATABASE_NAME:-kni_webapp}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching & Sessions
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Django Web Application
  web:
    build: 
      context: .
      target: production
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8000}:8000"
    environment:
      # Django Settings
      DJANGO_SETTINGS_MODULE: project.settings
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-insecure-dev-key-change-in-production}
      DEBUG: ${DEBUG:-False}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # Database Configuration  
      DATABASE_URL: postgresql://${DATABASE_USER:-kni_user}:${DATABASE_PASSWORD:-kni_secure_password}@db:5432/${DATABASE_NAME:-kni_webapp}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      
      # Site Configuration
      WAGTAILADMIN_BASE_URL: ${WAGTAILADMIN_BASE_URL:-http://localhost:8000}
      
      # Security Settings
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-False}
      
      # Tenant Settings
      SEED_TENANT_DATA: ${SEED_TENANT_DATA:-false}
      TENANT_SCHEMA: ${TENANT_SCHEMA:-}
      TENANT_HOSTNAME: ${TENANT_HOSTNAME:-}
      TENANT_PORT: ${TENANT_PORT:-80}
      TENANT_ADMIN_USER: ${TENANT_ADMIN_USER:-admin}
      TENANT_ADMIN_PASSWORD: ${TENANT_ADMIN_PASSWORD:-admin123}
      TENANT_ADMIN_EMAIL: ${TENANT_ADMIN_EMAIL:-admin@example.com}
      
      # Superuser (Development)
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-}
      
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - static_volume:/usr/share/nginx/html/static:ro
      - media_volume:/usr/share/nginx/html/media:ro
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    profiles:
      - nginx  # Only start with --profile nginx

  # Celery Worker (Optional - for background tasks)
  worker:
    build: 
      context: .
      target: production
    restart: unless-stopped
    command: celery -A project worker -l info --concurrency=2
    environment:
      DJANGO_SETTINGS_MODULE: project.settings
      DATABASE_URL: postgresql://${DATABASE_USER:-kni_user}:${DATABASE_PASSWORD:-kni_secure_password}@db:5432/${DATABASE_NAME:-kni_webapp}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-}@redis:6379/2
    volumes:
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    profiles:
      - worker  # Only start with --profile worker

  # Celery Beat (Optional - for scheduled tasks)
  beat:
    build: 
      context: .
      target: production
    restart: unless-stopped
    command: celery -A project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      DJANGO_SETTINGS_MODULE: project.settings
      DATABASE_URL: postgresql://${DATABASE_USER:-kni_user}:${DATABASE_PASSWORD:-kni_secure_password}@db:5432/${DATABASE_NAME:-kni_webapp}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/1
    depends_on:
      - db
      - redis
    profiles:
      - beat  # Only start with --profile beat

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  default:
    name: kni_webapp_network