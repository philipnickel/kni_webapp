# Copy these key-value pairs into your Coolify app's Environment tab.
# Use strong secrets and set per-customer domain/DB/Redis values.

# --- Core Django ---
DJANGO_SETTINGS_MODULE=project.settings
DEBUG=false

# Generate a long random value. Do NOT reuse between customers.
DJANGO_SECRET_KEY=REPLACE_WITH_STRONG_RANDOM_SECRET

# Minimal domain inputs (auto-derives hosts, CSRF, admin URL)
# Example: example.com
PRIMARY_DOMAIN=REPLACE_WITH_CUSTOMER_PRIMARY_DOMAIN
# Optional: comma-separated extra domains (no scheme)
# Example: api.example.com,admin.example.com
EXTRA_DOMAINS=

# Use HTTPS in production behind Coolify/Hostinger
SECURE_SSL_REDIRECT=true

# --- Database (managed or external Postgres) ---
# Ensure sslmode=require in production
# Example: postgresql://user:pass@hostname:5432/dbname?sslmode=require
DATABASE_URL=REPLACE_WITH_DATABASE_URL

# --- Redis (internal-only, password required) ---
# Example: redis://:strongpassword@redis:6379/0
REDIS_URL=REPLACE_WITH_REDIS_URL
REDIS_PASSWORD=REPLACE_WITH_STRONG_REDIS_PASSWORD

# --- Optional multi-tenant/seed flags (keep disabled in production) ---
SEED_TENANT_DATA=false
TENANT_SCHEMA=
TENANT_HOSTNAME=
TENANT_PORT=443
TENANT_ADMIN_USER=
TENANT_ADMIN_PASSWORD=
TENANT_ADMIN_EMAIL=

# --- Notes ---
# 1) Set these per deployment/customer inside Coolify; do not commit real secrets.
# 2) Attach persistent volumes to /app/staticfiles and /app/media in Coolify.
# 3) After deploy, run one-off: python manage.py migrate
# 4) Ensure Coolify forwards X-Forwarded-Proto: https and your domain DNS points correctly.

