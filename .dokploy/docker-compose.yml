# Dokploy-specific Docker Compose configuration
# This file overrides the main docker-compose.yml for Dokploy deployments

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-kni_webapp}
      POSTGRES_USER: ${DATABASE_USER:-kni_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-kni_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/app/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-kni_user} -d ${DATABASE_NAME:-kni_webapp}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  web:
    build:
      context: .
      target: production
    restart: unless-stopped
    ports:
      - "8000:80"  # Map Dokploy's expected port 8000 to container's port 80
    environment:
      # Production settings for Dokploy
      DJANGO_SETTINGS_MODULE: project.settings
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-}
      DEBUG: false
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,72.60.81.210

      # Database and Redis
      DATABASE_URL: postgresql://${DATABASE_USER:-kni_user}:${DATABASE_PASSWORD:-kni_secure_password}@db:5432/${DATABASE_NAME:-kni_webapp}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0

      # Production command
      PRODUCTION_COMMAND: /usr/bin/supervisord -c /app/.config/supervisord.conf -n

      # Wagtail admin URL for Dokploy
      WAGTAILADMIN_BASE_URL: http://72.60.81.210:8000

    volumes:
      - ./static:/app/static:ro
      - ./media:/app/media:rw
      - ./logs:/app/logs
      - ./backups:/app/backups

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health/ready/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

volumes:
  postgres_data:
  redis_data: