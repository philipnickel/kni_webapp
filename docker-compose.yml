# =============================================================================
# KNI Webapp - Unified Docker Compose Configuration
# Environment-driven setup for development, production, and Dokploy deployment
# =============================================================================

services:
  # Django Web Application
  web:
    build:
      context: .
      dockerfile: deployment/Dockerfile
      target: ${DOCKER_TARGET:-development}
    restart: ${RESTART_POLICY:-unless-stopped}
    env_file:
      - ${ENV_FILE:-.env.dev}
    ports:
      - "${WEB_PORT:-8001}:${CONTAINER_PORT:-8000}"
    environment:
      # Core Django settings
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-secret-key-not-for-production}
      DEBUG: ${DEBUG:-True}
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-project.settings.dev}

      # Domain Configuration
      DOMAIN: ${DOMAIN:-localhost}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      PRIMARY_DOMAIN: ${PRIMARY_DOMAIN:-localhost}

      # Database Configuration
      DATABASE_URL: ${DATABASE_URL:-postgresql://wagtail:wagtail@db:5432/wagtail}
      DATABASE_NAME: ${DATABASE_NAME:-wagtail}
      DATABASE_USER: ${DATABASE_USER:-wagtail}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-wagtail}

      # Redis Configuration
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Email Configuration
      EMAIL_HOST: ${EMAIL_HOST:-localhost}
      EMAIL_PORT: ${EMAIL_PORT:-1025}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-False}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:-}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:-}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@localhost}
      SERVER_EMAIL: ${SERVER_EMAIL:-noreply@localhost}
      
      # File Storage
      USE_S3: ${USE_S3:-False}
      MEDIA_ROOT: ${MEDIA_ROOT:-/app/media}
      STATIC_ROOT: ${STATIC_ROOT:-/app/staticfiles}
      
      # Wagtail Settings
      WAGTAILADMIN_BASE_URL: ${WAGTAILADMIN_BASE_URL:-http://localhost:8000}
      WAGTAIL_SITE_NAME: ${WAGTAIL_SITE_NAME:-KNI Webapp}
      
      # Development Tools (only in dev mode)
      INTERNAL_IPS: ${INTERNAL_IPS:-127.0.0.1,::1}
      
      # SaaS Configuration
      SAAS_MODE: ${SAAS_MODE:-False}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-}
      PREVIEW_MODE: ${PREVIEW_MODE:-False}
      PREVIEW_ID: ${PREVIEW_ID:-}
      
      # Performance Settings
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-3}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-30}
      GUNICORN_MAX_REQUESTS: ${GUNICORN_MAX_REQUESTS:-1000}
    volumes:
      - ./src/backend:/app:cached        # Live code mount for development
      - ./manage.py:/app/manage.py:cached # Mount manage.py
      - ./requirements.txt:/app/requirements.txt:cached # Mount requirements.txt
      - ./templates:/app/templates:cached # Mount templates directory
      - ./backups:/app/backups:cached    # Mount backup files for restore
      - ./src/frontend/static:/app/frontend_static:cached # Mount frontend static files
      - media_data:/app/media            # Persistent media files
      - static_data:/app/staticfiles     # Persistent static files
      - logs_data:/app/logs              # Persistent logs
    depends_on:
      db:
        condition: service_healthy
        required: true
      redis:
        condition: service_healthy
        required: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CONTAINER_PORT:-8000}/health/ready/"]
      interval: ${HEALTH_INTERVAL:-30s}
      timeout: ${HEALTH_TIMEOUT:-10s}
      retries: ${HEALTH_RETRIES:-3}
      start_period: ${HEALTH_START_PERIOD:-1m}

  # Node.js for Tailwind/Preline watcher (development only)
  node:
    image: node:20-slim
    working_dir: /app/src/frontend
    env_file:
      - ${ENV_FILE:-.env.dev}
    command: ${NODE_COMMAND:-sh -c "npm install && npm run dev"}
    environment:
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - .:/app:cached                    # Live code mount
      - node_modules:/app/src/frontend/node_modules   # Persistent node_modules
    ports:
      - "${NODE_PORT:-3000}:3000"        # Optional: for dev server if needed
    profiles:
      - ${PROFILE_DEV:-dev}               # Only start in development

  # PostgreSQL Database
  db:
    image: ${POSTGRES_IMAGE:-postgres:16-alpine}
    restart: ${RESTART_POLICY:-unless-stopped}
    env_file:
      - ${ENV_FILE:-.env.dev}
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-wagtail}
      POSTGRES_USER: ${DATABASE_USER:-wagtail}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:-}
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-wagtail} -d ${DATABASE_NAME:-wagtail}"]
      interval: ${DB_HEALTH_INTERVAL:-10s}
      timeout: ${DB_HEALTH_TIMEOUT:-5s}
      retries: ${DB_HEALTH_RETRIES:-5}
      start_period: ${DB_HEALTH_START_PERIOD:-10s}

  # Redis Cache/Session Store
  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    restart: ${RESTART_POLICY:-unless-stopped}
    env_file:
      - ${ENV_FILE:-.env.dev}
    command: ${REDIS_COMMAND:-redis-server --appendonly yes}
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${REDIS_HEALTH_INTERVAL:-10s}
      timeout: ${REDIS_HEALTH_TIMEOUT:-5s}
      retries: ${REDIS_HEALTH_RETRIES:-5}
      start_period: ${REDIS_HEALTH_START_PERIOD:-5s}

  # Mailhog for email testing (development only)
  mailhog:
    image: ${MAILHOG_IMAGE:-mailhog/mailhog:latest}
    restart: ${RESTART_POLICY:-unless-stopped}
    env_file:
      - ${ENV_FILE:-.env.dev}
    ports:
      - "${MAILHOG_UI_PORT:-8025}:8025"  # UI at http://localhost:8025
      - "${MAILHOG_SMTP_PORT:-1025}:1025" # SMTP server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: ${MAILHOG_HEALTH_INTERVAL:-10s}
      timeout: ${MAILHOG_HEALTH_TIMEOUT:-5s}
      retries: ${MAILHOG_HEALTH_RETRIES:-3}
      start_period: ${MAILHOG_HEALTH_START_PERIOD:-5s}
    profiles:
      - ${PROFILE_DEV:-dev}               # Only start in development

  # Optional: MinIO for S3-compatible local storage (development only)
  # minio:
  #   image: minio/minio
  #   command: server /data --console-address ":9001"
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
  #   ports:
  #     - "${MINIO_API_PORT:-9000}:9000"
  #     - "${MINIO_CONSOLE_PORT:-9001}:9001"
  #   volumes:
  #     - minio_data:/data
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: ${MINIO_HEALTH_INTERVAL:-30s}
  #     timeout: ${MINIO_HEALTH_TIMEOUT:-20s}
  #     retries: ${MINIO_HEALTH_RETRIES:-3}
  #     start_period: ${MINIO_HEALTH_START_PERIOD:-30s}
  #   profiles:
  #     - dev                               # Only start in development

volumes:
  db_data:
  redis_data:
  media_data:
  static_data:
  logs_data:
  node_modules:
  # minio_data:                            # Uncomment if using MinIO

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME:-kni_webapp}