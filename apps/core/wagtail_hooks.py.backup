from django.contrib.auth.models import Group, Permission
from django.utils.html import format_html
from wagtail import hooks
from wagtail.admin import messages
from wagtail.admin.menu import MenuItem
from wagtail.admin.search import SearchArea
from wagtail.admin.site_summary import SummaryItem


# Temporarily disabled to test basic functionality
# @hooks.register('construct_main_menu')
# def hide_menu_items_for_customers(request, menu_items):
#     return menu_items

# @hooks.register('construct_settings_menu') 
# def hide_settings_items_for_customers(request, menu_items):
#     return menu_items


# Temporarily commented out to avoid conflicts
# @hooks.register('construct_homepage_panels')
# def customize_homepage_panels(request, panels):
#     """
#     Customize the dashboard for customer users.
#     Show simplified summary for non-techy users.
#     """
#     return panels  # Return all panels for now

# class SimplifiedSiteSummaryItem(SummaryItem):
#     """
#     Simplified site summary for customer users.
#     Shows only essential information.
#     """
#     pass  # Temporarily disabled


@hooks.register('register_admin_search_area')
def hide_technical_search_areas(search_areas):
    """
    Hide technical search areas from customer users.
    """
    # This will be handled in the template customization
    return search_areas


@hooks.register('after_edit_page')
def show_helpful_message_after_page_edit(request, page):
    """
    Show helpful, non-technical messages after page edits for customer users.
    """
    if not request.user.is_superuser:
        if not page.live:
            messages.info(
                request, 
                "Din side er gemt som kladde. For at vise den på websitet, "
                "skal du publicere den ved at klikke på 'Publicer' knappen."
            )


# Create a simplified customer group with limited permissions
@hooks.register('after_create_user')
def add_customer_to_group(request, user):
    """
    Automatically add new users to customer group unless they are superusers.
    """
    if not user.is_superuser and not user.is_staff:
        # Create customer group if it doesn't exist
        customer_group, created = Group.objects.get_or_create(
            name='Customer Editors',
            defaults={
                'permissions': Permission.objects.filter(
                    content_type__app_label='wagtailcore',
                    codename__in=['access_admin', 'add_page', 'change_page', 'publish_page']
                )
            }
        )
        user.groups.add(customer_group)