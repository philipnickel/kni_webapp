#!/usr/bin/env python
"""
Create the core Wagtail tables in the correct order
"""
import os
import sys
import django

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from django_tenants.utils import schema_context
from django.db import connection

def create_core_tables():
    print("üîß Creating core Wagtail tables in johann schema...")
    
    with schema_context('johann'):
        with connection.cursor() as cursor:
            # First, create the basic tables that already exist from our fake migrations
            # We just need to add the missing ones
            
            print("‚úÖ Basic Django tables already exist from faked migrations")
            
            # Create the user profile table that's missing
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS wagtailusers_userprofile (
                    id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    submitted_notifications BOOLEAN NOT NULL DEFAULT TRUE,
                    approved_notifications BOOLEAN NOT NULL DEFAULT TRUE,
                    rejected_notifications BOOLEAN NOT NULL DEFAULT TRUE,
                    updated_comments_notifications BOOLEAN NOT NULL DEFAULT TRUE,
                    preferred_language VARCHAR(10) NOT NULL DEFAULT '',
                    current_time_zone VARCHAR(40) NOT NULL DEFAULT '',
                    avatar VARCHAR(100) NOT NULL DEFAULT '',
                    dismissibles JSONB NOT NULL DEFAULT '{}',
                    theme VARCHAR(20) NOT NULL DEFAULT 'system',
                    density VARCHAR(20) NOT NULL DEFAULT 'default',
                    contrast VARCHAR(20) NOT NULL DEFAULT 'default',
                    user_id INTEGER NOT NULL UNIQUE REFERENCES auth_user(id) ON DELETE CASCADE
                );
            """)
            print("‚úÖ Created wagtailusers_userprofile")
            
            # Check what tables already exist
            cursor.execute("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'johann' 
                ORDER BY table_name;
            """)
            existing_tables = [row[0] for row in cursor.fetchall()]
            print(f"üìã Found {len(existing_tables)} existing tables")
            
            # Check if wagtailcore_page exists
            if 'wagtailcore_page' not in existing_tables:
                print("‚ùå wagtailcore_page missing - this should have been created by faked migrations")
                # The issue is our faked migrations didn't actually create the table structures
                # We need to run the actual SQL commands to create them
                
                print("üî® Creating essential Wagtail tables manually...")
                
                # Create content types if missing
                cursor.execute("""
                    INSERT INTO django_content_type (app_label, model) 
                    SELECT 'wagtailcore', 'page'
                    WHERE NOT EXISTS (
                        SELECT 1 FROM django_content_type 
                        WHERE app_label = 'wagtailcore' AND model = 'page'
                    );
                """)
                
                # Get the content type ID for page
                cursor.execute("""
                    SELECT id FROM django_content_type 
                    WHERE app_label = 'wagtailcore' AND model = 'page';
                """)
                page_content_type_id = cursor.fetchone()
                if page_content_type_id:
                    page_content_type_id = page_content_type_id[0]
                    print(f"üìù Page content type ID: {page_content_type_id}")
                else:
                    print("‚ùå Could not find page content type")
                    return False
            
    print("\nüéâ Core tables creation completed!")
    return True

if __name__ == '__main__':
    try:
        create_core_tables()
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()