# Generated by Django 5.0.14 on 2025-09-11 14:23

from django.db import migrations
from django.utils.text import slugify


def convert_projects_to_pages_fixed(apps, schema_editor):
    """Convert existing Project snippets to ProjectPage instances - fixed version"""
    
    # Get model classes
    Project = apps.get_model('projects', 'Project')
    ProjectImage = apps.get_model('projects', 'ProjectImage')
    ProjectTag = apps.get_model('projects', 'ProjectTag')
    
    ProjectPage = apps.get_model('projects', 'ProjectPage')
    ProjectPageImage = apps.get_model('projects', 'ProjectPageImage')
    ProjectPageTag = apps.get_model('projects', 'ProjectPageTag')
    
    Page = apps.get_model('wagtailcore', 'Page')
    GalleryPage = apps.get_model('pages', 'GalleryPage')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Get or create a GalleryPage to be parent of all projects
    try:
        # Try to find an existing GalleryPage
        gallery_page = GalleryPage.objects.first()
        if not gallery_page:
            # Create a GalleryPage if it doesn't exist
            # First get the homepage or root page
            try:
                homepage = Page.objects.filter(depth=2).first()
                if not homepage:
                    # If no homepage, use the root page
                    homepage = Page.objects.get(depth=1)
            except Page.DoesNotExist:
                print("Warning: Could not find a suitable parent page. Skipping conversion.")
                return
            
            # Create GalleryPage as child of homepage
            gallery_page = homepage.add_child(instance=GalleryPage(
                title="Projekter",
                slug="projekter",
                intro="Vores projekter og arbejde",
            ))
            print(f"Created GalleryPage: {gallery_page.title} at {gallery_page.url}")
            
    except Exception as e:
        print(f"Error finding/creating GalleryPage: {e}")
        return
    
    # Convert each Project to ProjectPage
    converted_count = 0
    for project in Project.objects.all():
        try:
            # Create ProjectPage as child of gallery page
            project_page = gallery_page.add_child(instance=ProjectPage(
                title=project.title,
                slug=project.slug or slugify(project.title),
                description=project.description,
                materials=project.materials,
                client_name=project.client_name,
                location=project.location,
                featured=project.featured,
                project_date=project.date,
                live=project.published,  # Use published status as live status
            ))
            
            # Convert images
            for project_image in project.images.all():
                ProjectPageImage.objects.create(
                    project_page=project_page,
                    image=project_image.image,
                    caption=project_image.caption,
                    alt_text=project_image.alt_text,
                    sort_order=project_image.sort_order,
                )
            
            # Convert tags - need to handle the taggit relationship properly
            for tag in project.tags.all():
                project_page.tags.add(tag.name)
            
            converted_count += 1
            print(f"Converted project: {project.title} -> {project_page.url}")
            
        except Exception as e:
            print(f"Error converting project {project.title}: {e}")
            continue
    
    print(f"Successfully converted {converted_count} projects to pages")


def reverse_conversion_fixed(apps, schema_editor):
    """Reverse the conversion - remove ProjectPage instances"""
    ProjectPage = apps.get_model('projects', 'ProjectPage')
    
    # Delete all ProjectPage instances (this will also delete related images and tags)
    count = ProjectPage.objects.count()
    ProjectPage.objects.all().delete()
    print(f"Deleted {count} ProjectPage instances")


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0006_convert_projects_to_pages'),
        ('pages', '0002_contactpage_gallerypage_alter_homepage_options_and_more'),
        ('wagtailcore', '0083_workflowcontenttype'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.RunPython(
            convert_projects_to_pages_fixed, 
            reverse_conversion_fixed
        ),
    ]
