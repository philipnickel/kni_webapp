[
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "de8dff2b-500b-49f4-8217-dd6dfbeb2c21",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC001-get home page content",
    "description": "Verify that the GET request to the root endpoint '/' returns the home page with all its modular content blocks including hero sections, featured projects, testimonials, and call-to-action sections in HTML format with status code 200.",
    "code": "import requests\n\ndef test_get_home_page_content():\n    base_url = \"http://localhost:8000\"\n    url = f\"{base_url}/\"\n    headers = {\n        \"Accept\": \"text/html\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=30)\n        # Assert status code 200\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        # Assert content type is HTML\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        assert \"text/html\" in content_type, f\"Expected Content-Type to contain 'text/html', got '{content_type}'\"\n        content = response.text.lower()\n        # Check presence of key modular content blocks in HTML content, heuristically by substrings\n        # Hero sections\n        assert any(keyword in content for keyword in [\"hero-section\", \"hero\", \"welcome\"]), \"Hero section not found in homepage content\"\n        # Featured projects\n        assert any(keyword in content for keyword in [\"featured project\", \"featured-project\", \"featured projects\", \"featured_projects\", \"featuredproject\"]), \"Featured projects section not found\"\n        # Testimonials\n        assert any(keyword in content for keyword in [\"testimonial\"]), \"Testimonials section not found\"\n        # Call-to-action sections\n        assert any(keyword in content for keyword in [\"call to action\", \"cta\", \"call-to-action\"]), \"Call-to-action section not found\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_home_page_content()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 29, in <module>\n  File \"<string>\", line 23, in test_get_home_page_content\nAssertionError: Testimonials section not found\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.509Z",
    "modified": "2025-09-11T15:29:14.445Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "1a6e04e1-f631-49f7-a921-39c2e0592851",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC002-list all projects in admin view",
    "description": "Verify that the GET request to '/admin/projects/' returns a paginated list of all projects in HTML format with status code 200, accessible only to authorized admin users.",
    "code": "import requests\n\ndef test_list_all_projects_admin_view():\n    base_url = \"http://localhost:8000\"\n    endpoint = \"/admin/projects/\"\n    url = base_url + endpoint\n    timeout = 30\n\n    # Admin credentials - replace with valid admin username and password\n    admin_auth = ('admin', 'adminpassword')\n\n    headers = {\n        \"Accept\": \"text/html\",\n    }\n\n    try:\n        response = requests.get(url, headers=headers, auth=admin_auth, timeout=timeout)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    # Validate response status code is 200 for authorized admin access\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    # Validate content type is HTML\n    content_type = response.headers.get(\"Content-Type\", \"\")\n    assert \"text/html\" in content_type, f\"Expected 'text/html' in Content-Type, got {content_type}\"\n\n    # Validate pagination by checking presence of typical pagination elements in HTML\n    html = response.text.lower()\n    assert (\"pagination\" in html or \"page\" in html), \"Response HTML does not appear to contain pagination elements\"\n\n# Run the test function\ntest_list_all_projects_admin_view()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.516Z",
    "modified": "2025-09-11T15:28:54.551Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "7acd4b42-a3b6-4b01-8b7e-98d2d9a0f058",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC003-create new project with valid data",
    "description": "Verify that a POST request to '/admin/projects/create/' with valid project data (title, description, featured, published, date) creates a new project and redirects to the project list page with status code 302.",
    "code": "import requests\nfrom requests.exceptions import RequestException\n\nBASE_URL = \"http://localhost:8000\"\nCREATE_PROJECT_PATH = \"/admin/projects/create/\"\nPROJECTS_LIST_PATH = \"/admin/projects/\"\n\n\ndef test_create_new_project_with_valid_data():\n    session = requests.Session()\n    try:\n        # Step 1: Get the create project page to obtain CSRF token\n        create_page_response = session.get(BASE_URL + CREATE_PROJECT_PATH, timeout=30)\n        assert create_page_response.status_code == 200, f\"Expected 200 OK on GET create page, got {create_page_response.status_code}\"\n\n        # Extract CSRF token from cookies or hidden input in response content\n        # Usually Django sets CSRF token in cookie named 'csrftoken'\n        csrftoken = session.cookies.get('csrftoken')\n        if not csrftoken:\n            # Try to parse from response content (hidden input named csrfmiddlewaretoken)\n            import re\n            match = re.search(r'name=\"csrfmiddlewaretoken\" value=\"(.+?)\"', create_page_response.text)\n            assert match, \"CSRF token not found in form\"\n            csrftoken = match.group(1)\n\n        # Prepare valid project data\n        project_data = {\n            \"title\": \"New Project Title\",\n            \"description\": \"This is a description for a new test project.\",\n            \"featured\": \"true\",  # HTML form data uses string, backend will parse boolean\n            \"published\": \"true\",\n            \"date\": \"2025-09-10\",\n            \"csrfmiddlewaretoken\": csrftoken\n        }\n\n        headers = {\n            \"Referer\": BASE_URL + CREATE_PROJECT_PATH,\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n\n        # Step 2: POST to create project with form data and CSRF token\n        post_response = session.post(\n            BASE_URL + CREATE_PROJECT_PATH,\n            data=project_data,\n            headers=headers,\n            timeout=30,\n            allow_redirects=False  # We want to check 302 redirect explicitly\n        )\n\n        # Validate response is a redirect (302)\n        assert post_response.status_code == 302, f\"Expected 302 redirect, got {post_response.status_code}\"\n\n        # Validate redirect location is to project list page\n        location = post_response.headers.get(\"Location\", \"\")\n        assert location.endswith(PROJECTS_LIST_PATH), f\"Redirect location should end with {PROJECTS_LIST_PATH}, got {location}\"\n\n    except RequestException as e:\n        assert False, f\"Request failed: {str(e)}\"\n\n\ntest_create_new_project_with_valid_data()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 61, in <module>\n  File \"<string>\", line 51, in test_create_new_project_with_valid_data\nAssertionError: Expected 302 redirect, got 200\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.522Z",
    "modified": "2025-09-11T15:38:11.432Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "aad471cd-860a-47dd-8f03-51f54b6c13ee",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC004-get project details by slug",
    "description": "Verify that a GET request to '/projekter/{slug}/' returns the detailed project page in HTML format with status code 200 for an existing project, and returns 404 if the project does not exist.",
    "code": "import requests\nfrom requests.exceptions import RequestException\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_project_details_by_slug():\n    session = requests.Session()\n    headers = {\n        \"Accept\": \"text/html\",\n    }\n\n    created_slug = None\n\n    try:\n        # Step 1: Create a new project to have an existing project slug\n        create_url = f\"{BASE_URL}/admin/projects/create/\"\n        # Use form-urlencoded payload with valid minimal project data\n        # Using a unique title to avoid conflicts\n        create_data = {\n            \"title\": \"Test Project For TC004\",\n            \"description\": \"Temporary project created for testing get project details by slug.\",\n            \"featured\": \"false\",\n            \"published\": \"true\",\n            \"date\": \"2024-01-01\"\n        }\n        # Create project (expect redirect status 302)\n        create_response = session.post(create_url, data=create_data, timeout=TIMEOUT)\n        assert create_response.status_code == 302, f\"Expected 302 on project create, got {create_response.status_code}\"\n\n        # Step 2: Retrieve the project list to find the slug of the created project\n        list_url = f\"{BASE_URL}/admin/projects/\"\n        list_response = session.get(list_url, headers=headers, timeout=TIMEOUT)\n        assert list_response.status_code == 200, f\"Expected 200 on project list, got {list_response.status_code}\"\n        # Parse the slug from the list page HTML (simple extraction)\n        # We assume the slug appears in URLs like /projekter/{slug}/ somewhere in the HTML\n        # We'll search for the project title and extract adjacent slug URL\n        from bs4 import BeautifulSoup\n        soup = BeautifulSoup(list_response.text, \"html.parser\")\n\n        project_slug = None\n        # Find all links matching /projekter/{slug}/ pattern\n        anchors = soup.find_all(\"a\", href=True)\n        for a in anchors:\n            href = a['href']\n            if href.startswith(\"/projekter/\") and href.endswith(\"/\"):\n                # Check if the anchor text or nearby text matches the project title\n                # or just take the first project link found\n                if \"Test Project For TC004\" in a.text:\n                    # Extract slug\n                    slug_candidate = href.split(\"/\")[2]\n                    project_slug = slug_candidate\n                    break\n\n        # If not found by anchor text match, fallback to first project link\n        if not project_slug:\n            for a in anchors:\n                href = a['href']\n                if href.startswith(\"/projekter/\") and href.endswith(\"/\"):\n                    project_slug = href.split(\"/\")[2]\n                    break\n\n        assert project_slug is not None, \"Failed to find the created project's slug in the project list\"\n        created_slug = project_slug\n\n        # Step 3: Make GET request to /projekter/{slug}/ for existing project\n        project_detail_url = f\"{BASE_URL}/projekter/{created_slug}/\"\n        detail_response = session.get(project_detail_url, headers=headers, timeout=TIMEOUT)\n        assert detail_response.status_code == 200, f\"Expected 200 status for existing project details, got {detail_response.status_code}\"\n        assert 'text/html' in detail_response.headers.get('Content-Type', ''), \"Response is not HTML content for existing project\"\n\n        # Step 4: Test non-existing slug returns 404\n        nonexistent_slug = \"nonexistent-slug-for-tc004-test\"\n        nonexistent_url = f\"{BASE_URL}/projekter/{nonexistent_slug}/\"\n        not_found_response = session.get(nonexistent_url, headers=headers, timeout=TIMEOUT)\n        assert not_found_response.status_code == 404, f\"Expected 404 for non-existent project slug, got {not_found_response.status_code}\"\n\n    except RequestException as e:\n        assert False, f\"Request failed: {e}\"\n    finally:\n        # Cleanup: Attempt to delete the created project via admin interface if possible\n        # Since no delete endpoint is specified in PRD, skip actual deletion\n        # Placeholder for cleanup logic if API expands\n        pass\n\ntest_get_project_details_by_slug()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 86, in <module>\n  File \"<string>\", line 29, in test_get_project_details_by_slug\nAssertionError: Expected 302 on project create, got 403\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.528Z",
    "modified": "2025-09-11T15:29:01.490Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "5195b950-79b9-4898-ac32-40678dbe8b74",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC005-display contact form page",
    "description": "Verify that a GET request to '/fa-tilbud/' returns the contact form HTML page with status code 200.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_display_contact_form_page():\n    url = f\"{BASE_URL}/fa-tilbud/\"\n    headers = {\n        \"Accept\": \"text/html\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        assert \"text/html\" in content_type, f\"Expected 'text/html' in Content-Type but got '{content_type}'\"\n        assert \"<form\" in response.text.lower(), \"Expected to find a form in the contact page HTML\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_display_contact_form_page()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.534Z",
    "modified": "2025-09-11T15:28:55.845Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "80de3225-4351-49f0-85f2-bdd641c99749",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC006-submit contact form with valid data and consent",
    "description": "Verify that a POST request to '/fa-tilbud/' with valid form data including name, email, optional phone, message, and consent set to true processes the submission, stores the data securely with consent tracking, triggers email notification, and redirects to the thank you page with status code 302.",
    "code": "import requests\n\ndef test_submit_contact_form_with_valid_data_and_consent():\n    base_url = \"http://localhost:8000\"\n    endpoint = f\"{base_url}/fa-tilbud/\"\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Accept\": \"text/html\"\n    }\n    form_data = {\n        \"name\": \"Test User\",\n        \"email\": \"testuser@example.com\",\n        \"phone\": \"12345678\",\n        \"message\": \"This is a test message.\",\n        \"consent\": \"true\"\n    }\n    try:\n        response = requests.post(endpoint, data=form_data, headers=headers, timeout=30, allow_redirects=False)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    # Expecting a redirect to thank you page with status code 302\n    assert response.status_code == 302, f\"Expected status code 302, got {response.status_code}\"\n    location = response.headers.get(\"Location\")\n    assert location is not None, \"Redirect location header missing\"\n    assert location.endswith(\"/fa-tilbud/tak/\") or location == \"/fa-tilbud/tak/\", f\"Unexpected redirect location: {location}\"\n\ntest_submit_contact_form_with_valid_data_and_consent()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 28, in <module>\n  File \"<string>\", line 23, in test_submit_contact_form_with_valid_data_and_consent\nAssertionError: Expected status code 302, got 403\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.540Z",
    "modified": "2025-09-11T15:29:04.419Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "c380ebbb-e09c-42d5-b1db-c9854d124e5f",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC007-display contact form thank you page",
    "description": "Verify that a GET request to '/fa-tilbud/tak/' returns the thank you message HTML page with status code 200 after successful form submission.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_display_contact_form_thank_you_page():\n    url = f\"{BASE_URL}/fa-tilbud/tak/\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        response.raise_for_status()\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        assert \"thank you\" in response.text.lower() or \"tak\" in response.text.lower(), \"Thank you message not found in response content\"\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\ntest_display_contact_form_thank_you_page()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.546Z",
    "modified": "2025-09-11T15:28:57.433Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "afff902f-4383-4635-ba47-35a36eb4b789",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC008-display project gallery with filtering",
    "description": "Verify that a GET request to '/gallery/' returns the gallery page HTML displaying project collections, and supports optional filtering by 'featured' status and 'tag' query parameters with status code 200.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\n    \"Accept\": \"text/html\"\n}\n\ndef test_display_project_gallery_with_filtering():\n    try:\n        # Test without query parameters\n        url = f\"{BASE_URL}/gallery/\"\n        response = requests.get(url, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        content = response.text\n        # Basic check for presence of project collections content\n        assert \"project\" in content.lower() or \"gallery\" in content.lower(), \"Gallery page content does not appear to be correct\"\n        \n        # Test with featured filter\n        params = {\"featured\": \"true\"}\n        response = requests.get(url, headers=HEADERS, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Featured filter: Expected status code 200, got {response.status_code}\"\n        content = response.text\n        assert \"project\" in content.lower() or \"gallery\" in content.lower(), \"Featured filtered gallery content missing expected elements\"\n        \n        # Test with tag filter (example tag)\n        params = {\"tag\": \"construction\"}\n        response = requests.get(url, headers=HEADERS, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Tag filter: Expected status code 200, got {response.status_code}\"\n        content = response.text\n        assert \"project\" in content.lower() or \"gallery\" in content.lower(), \"Tag filtered gallery content missing expected elements\"\n        \n        # Test with both featured and tag filters\n        params = {\"featured\": \"true\", \"tag\": \"construction\"}\n        response = requests.get(url, headers=HEADERS, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Featured + Tag filter: Expected status code 200, got {response.status_code}\"\n        content = response.text\n        assert \"project\" in content.lower() or \"gallery\" in content.lower(), \"Combined filtered gallery content missing expected elements\"\n    except requests.RequestException as e:\n        assert False, f\"RequestException occurred: {str(e)}\"\n\ntest_display_project_gallery_with_filtering()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.551Z",
    "modified": "2025-09-11T15:29:01.441Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "ca593ee2-e530-4dd2-90dd-6577b5f1768c",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC009-search pages and content with filters",
    "description": "Verify that a GET request to '/search/' with required 'query' parameter and optional 'type', 'featured', and 'page' parameters returns search results in HTML format with pagination and filtering applied, with status code 200.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\n    \"Accept\": \"text/html\"\n}\n\ndef test_TC009_search_pages_and_content_with_filters():\n    session = requests.Session()\n    url = f\"{BASE_URL}/search/\"\n    params_sets = [\n        {\"query\": \"project\"},                          # only required param\n        {\"query\": \"project\", \"type\": \"projects\"},     # with type filter\n        {\"query\": \"project\", \"featured\": \"true\"},     # with featured filter\n        {\"query\": \"project\", \"page\": 1},              # with page param\n        {\"query\": \"project\", \"type\": \"projects\", \"featured\": \"true\", \"page\": 1}  # all filters\n    ]\n    for params in params_sets:\n        try:\n            response = session.get(url, headers=HEADERS, params=params, timeout=TIMEOUT)\n        except requests.RequestException as e:\n            assert False, f\"Request failed with exception: {e}\"\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code} for params {params}\"\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        assert \"text/html\" in content_type, f\"Expected 'text/html' content type but got '{content_type}' for params {params}\"\n\n        html_text = response.text\n\n        # Check that the response is not empty and contains the query term somewhere\n        assert html_text and params[\"query\"].lower() in html_text.lower(), f\"Response HTML does not contain query term '{params['query']}' for params {params}\"\n\n        if \"page\" in params or \"pagination\" in html_text:\n            assert (\"pagination\" in html_text or \"aria-label=\\\"Pagination\\\"\" in html_text), f\"Pagination element expected but not found for params {params}\"\n\n        if \"type\" in params or \"featured\" in params:\n            assert (\"filters\" in html_text or \"filter\" in html_text), f\"Filter UI or indicators expected but not found for params {params}\"\n\ntest_TC009_search_pages_and_content_with_filters()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 39, in <module>\n  File \"<string>\", line 37, in test_TC009_search_pages_and_content_with_filters\nAssertionError: Filter UI or indicators expected but not found for params {'query': 'project', 'type': 'projects'}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.557Z",
    "modified": "2025-09-11T15:29:25.678Z"
  },
  {
    "projectId": "19be74d8-278e-40bc-b5a0-fc79a3974dea",
    "testId": "8da5e953-26f4-4eef-80e7-02d46e536e59",
    "userId": "24488448-1031-702d-2477-9fafefb3f634",
    "title": "TC010-get search autocomplete suggestions",
    "description": "Verify that a GET request to '/search/autocomplete/' with a query parameter 'q' of minimum length 2 returns a JSON array of search suggestions including title, url, and type with status code 200.",
    "code": "import requests\n\ndef test_get_search_autocomplete_suggestions():\n    base_url = \"http://localhost:8000\"\n    endpoint = \"/search/autocomplete/\"\n    params = {'q': 'te'}\n    headers = {\n        'Accept': 'application/json'\n    }\n    try:\n        response = requests.get(f\"{base_url}{endpoint}\", params=params, headers=headers, timeout=30)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to {endpoint} failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(data, dict), \"Response JSON root should be an object\"\n    assert 'suggestions' in data, \"Response JSON missing 'suggestions' key\"\n    suggestions = data['suggestions']\n    assert isinstance(suggestions, list), \"'suggestions' should be a list\"\n\n    for suggestion in suggestions:\n        assert isinstance(suggestion, dict), \"Each suggestion should be a dict\"\n        assert 'title' in suggestion and isinstance(suggestion['title'], str), \"Suggestion missing 'title' or not string\"\n        assert 'url' in suggestion and isinstance(suggestion['url'], str), \"Suggestion missing 'url' or not string\"\n        assert 'type' in suggestion and isinstance(suggestion['type'], str), \"Suggestion missing 'type' or not string\"\n\ntest_get_search_autocomplete_suggestions()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-11T15:28:37.563Z",
    "modified": "2025-09-11T15:29:02.100Z"
  }
]
