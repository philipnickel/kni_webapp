# =============================================================================
# KNI Webapp SaaS - Dokploy Deployment Template
# =============================================================================
# Zero-configuration deployment template for SaaS customers
# 
# Features:
#   - Auto-generates all secrets and passwords
#   - Auto-configures domains and ports
#   - Creates admin users automatically
#   - Supports preview deployments with full isolation
#   - Minimal resource usage for cost optimization
# =============================================================================

name: "KNI Webapp SaaS"
description: "Professional Django/Wagtail CMS with automatic configuration"
version: "1.0.0"
category: "CMS"
tags: ["django", "wagtail", "cms", "saas"]

# Template variables (customer provides these)
variables:
  - name: "DOMAIN"
    description: "Customer domain (optional)"
    type: "string"
    required: false
    default: "localhost"
  - name: "ADMIN_EMAIL"
    description: "Admin email address (optional)"
    type: "string"
    required: false
    default: "admin@localhost"

# Docker Compose configuration
compose:
  version: "3.8"
  
  services:
    # Main web application
    web:
      image: "kni-webapp:latest"
      restart: unless-stopped
      ports:
        - "80:80"
      environment:
        # SaaS Mode - enables auto-configuration
        SAAS_MODE: "true"
        
        # Customer-provided variables
        DOMAIN: "${DOMAIN}"
        ADMIN_EMAIL: "${ADMIN_EMAIL}"
        
        # Auto-generated secrets (will be generated by entrypoint)
        DJANGO_SECRET_KEY: "{{AUTO_GENERATE}}"
        DATABASE_PASSWORD: "{{AUTO_GENERATE}}"
        REDIS_PASSWORD: "{{AUTO_GENERATE}}"
        
        # Auto-configured URLs (will be set by entrypoint)
        DATABASE_URL: "postgresql://kni_user:{{AUTO_GENERATE}}@postgres:5432/kni_webapp"
        REDIS_URL: "redis://:{{AUTO_GENERATE}}@redis:6379/0"
        
        # SaaS defaults
        DEBUG: "False"
        ALLOWED_HOSTS: "${DOMAIN},www.${DOMAIN},localhost,127.0.0.1"
        CSRF_TRUSTED_ORIGINS: "https://${DOMAIN},https://www.${DOMAIN}"
        
        # Resource optimization
        GUNICORN_WORKERS: "2"
        GUNICORN_TIMEOUT: "60"
        GUNICORN_MAX_REQUESTS: "1000"
        
        # Security settings
        SECURE_SSL_REDIRECT: "False"  # Let Dokploy handle SSL
        SESSION_COOKIE_SECURE: "False"  # Will be true in production
        CSRF_COOKIE_SECURE: "False"   # Will be true in production
        
      volumes:
        # Use Dokploy's recommended ../files/ directory for persistence
        - "../files/media:/app/media"
        - "../files/logs:/app/logs"
        - "../files/backups:/app/backups"
        
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
          
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:80/health/ready/"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 120s

    # PostgreSQL database
    postgres:
      image: "postgres:15-alpine"
      restart: unless-stopped
      environment:
        POSTGRES_DB: "kni_webapp"
        POSTGRES_USER: "kni_user"
        POSTGRES_PASSWORD: "{{AUTO_GENERATE}}"
        POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      volumes:
        # Use Dokploy's recommended ../files/ directory for persistence
        - "../files/postgres_data:/var/lib/postgresql/data"
        - "../files/backups:/app/backups"
      ports:
        - "5432:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U kni_user -d kni_webapp"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s

    # Redis cache
    redis:
      image: "redis:7-alpine"
      restart: unless-stopped
      command: "redis-server --appendonly yes --requirepass {{AUTO_GENERATE}}"
      volumes:
        # Use Dokploy's recommended ../files/ directory for persistence
        - "../files/redis_data:/data"
      ports:
        - "6379:6379"
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 5s

  # Volumes are now managed via ../files/ directory for persistence

# Preview deployment configuration
preview:
  enabled: true
  isolation: "full"  # Each preview gets its own database and Redis
  
  # Preview-specific overrides
  overrides:
    web:
      environment:
        PREVIEW_MODE: "true"
        PREVIEW_ID: "${PREVIEW_ID}"
        GUNICORN_WORKERS: "1"  # Minimal resources for previews
        GUNICORN_TIMEOUT: "30"
        GUNICORN_MAX_REQUESTS: "100"
        DEBUG: "True"  # Enable debug for previews
        
    postgres:
      environment:
        POSTGRES_DB: "kni_webapp_${PREVIEW_ID}"
      volumes:
        - postgres_preview_${PREVIEW_ID}:/var/lib/postgresql/data
        
    redis:
      command: "redis-server --appendonly yes --requirepass {{AUTO_GENERATE}}"
      volumes:
        - redis_preview_${PREVIEW_ID}:/data

# Resource limits for cost optimization
resources:
  production:
    web:
      cpu: "1.0"
      memory: "1Gi"
    postgres:
      cpu: "0.5"
      memory: "512Mi"
    redis:
      cpu: "0.25"
      memory: "256Mi"
      
  preview:
    web:
      cpu: "0.25"
      memory: "256Mi"
    postgres:
      cpu: "0.25"
      memory: "256Mi"
    redis:
      cpu: "0.1"
      memory: "128Mi"

# Auto-cleanup settings
cleanup:
  preview_max_age: "7d"  # Keep previews for 7 days
  preview_max_count: "10"  # Maximum 10 concurrent previews
  auto_cleanup: true

# Health check endpoints
health_checks:
  - path: "/health/ready/"
    timeout: 10
    interval: 30
    retries: 3
    
  - path: "/admin/"
    timeout: 15
    interval: 60
    retries: 2

# Deployment instructions
instructions: |
  ## KNI Webapp SaaS Deployment
  
  ### What you get:
  - Professional Django/Wagtail CMS
  - Automatic configuration (no manual setup required)
  - Admin panel with auto-generated credentials
  - Preview deployments for testing
  - Automatic backups and health monitoring
  
  ### Customer Setup:
  1. Provide your domain (optional)
  2. Provide admin email (optional)
  3. Click Deploy
  
  ### What happens automatically:
  - Django secret key generated
  - Database passwords created
  - Admin user created
  - Domain configured
  - SSL certificates issued
  - Health monitoring enabled
  
  ### Access your application:
  - Main site: https://your-domain.com
  - Admin panel: https://your-domain.com/admin/
  - Credentials will be displayed after deployment
  
  ### Preview Deployments:
  - Create pull requests to test changes
  - Each preview gets its own isolated environment
  - Previews auto-cleanup after 7 days
  
  ### Support:
  - Documentation: https://docs.kni-webapp.com
  - Support: support@kni-webapp.com

