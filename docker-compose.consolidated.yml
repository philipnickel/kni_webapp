# Consolidated Docker Compose configuration for KNI Webapp
# Supports local development, production, and Coolify deployment
# Usage:
#   Local development:     docker-compose --profile local up
#   Production standalone: docker-compose --profile production up
#   Coolify deployment:    docker-compose --profile coolify up

version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-kni_webapp}
      POSTGRES_USER: ${DATABASE_USER:-kni_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-kni_secure_password}
      POSTGRES_HOST_AUTH_METHOD: ${DATABASE_AUTH_METHOD:-md5}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      # Only expose ports for local development and standalone production
      - target: 5432
        published: ${DATABASE_PORT:-5432}
        protocol: tcp
        mode: host
        # Profiles that need direct database access
    profiles: ["local", "production", "coolify"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-kni_user} -d ${DATABASE_NAME:-kni_webapp}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      # Only expose ports for local development and standalone production
      - target: 6379
        published: ${REDIS_PORT:-6379}
        protocol: tcp
        mode: host
    profiles: ["local", "production", "coolify"]
    healthcheck:
      test:
        - CMD
        - sh
        - -c
        - |
          if [ -n "$REDIS_PASSWORD" ]; then
            redis-cli -a "$REDIS_PASSWORD" ping
          else
            redis-cli ping
          fi
      interval: 10s
      timeout: 5s
      retries: 5

  web-local:
    build:
      context: .
      target: production
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8003}:8000"
    environment: &web-env-base
      ROLE: web
      DJANGO_SETTINGS_MODULE: project.settings
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-insecure-dev-key-change-in-production}
      DEBUG: ${DEBUG:-False}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-http://localhost:8003}

      DATABASE_URL: postgresql://${DATABASE_USER:-kni_user}:${DATABASE_PASSWORD:-kni_secure_password}@db:5432/${DATABASE_NAME:-kni_webapp}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0

      WAGTAILADMIN_BASE_URL: ${WAGTAILADMIN_BASE_URL:-http://localhost:8003}
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-False}

      SEED_TENANT_DATA: ${SEED_TENANT_DATA:-false}
      TENANT_SCHEMA: ${TENANT_SCHEMA:-}
      TENANT_HOSTNAME: ${TENANT_HOSTNAME:-}
      TENANT_PORT: ${TENANT_PORT:-80}
      TENANT_ADMIN_USER: ${TENANT_ADMIN_USER:-admin}
      TENANT_ADMIN_PASSWORD: ${TENANT_ADMIN_PASSWORD:-admin123}
      TENANT_ADMIN_EMAIL: ${TENANT_ADMIN_EMAIL:-admin@example.com}

      LOAD_BASELINE: ${LOAD_BASELINE:-false}

      # Superuser configuration (mainly for development)
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backups:/app/backups
      - ./baselineData:/app/baselineData
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["local"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web-production:
    build:
      context: .
      target: production
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8003}:8000"
    environment:
      <<: *web-env-base
      # Production-specific overrides
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-True}
      LOAD_BASELINE: ${LOAD_BASELINE:-false}
      # Superuser creation for production
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-admin@jcleemannbyg.dk}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-admin123}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backups:/app/backups
      - ./baselineData:/app/baselineData
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["production"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web-coolify:
    build:
      context: .
      target: production
    restart: unless-stopped
    expose:
      - 8000
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-1G}
          cpus: '${CPU_LIMIT:-1.0}'
        reservations:
          memory: ${MEMORY_RESERVATION:-512M}
          cpus: '${CPU_RESERVATION:-0.5}'
    environment:
      <<: *web-env-base
      # Coolify-specific overrides
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-}
      SERVICE_FQDN_WEB_8000: ${SERVICE_FQDN_WEB:-}
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-True}
      LOAD_BASELINE: ${LOAD_BASELINE:-true}

      # Email Configuration
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:-}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:-}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@example.com}

      # Performance Settings
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-2}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-60}
      GUNICORN_MAX_REQUESTS: ${GUNICORN_MAX_REQUESTS:-1000}
      GUNICORN_MAX_REQUESTS_JITTER: ${GUNICORN_MAX_REQUESTS_JITTER:-100}
      GUNICORN_WORKER_CLASS: ${GUNICORN_WORKER_CLASS:-sync}
      GUNICORN_KEEP_ALIVE: ${GUNICORN_KEEP_ALIVE:-5}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      # No backup volumes for Coolify deployment
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["coolify"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: