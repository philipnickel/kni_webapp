#!/usr/bin/env python
"""
Properly fix Johann's tenant schema by creating the missing Wagtail tables
"""
import os
import sys
import django
from django.db import connection

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from django_tenants.utils import schema_context

def create_missing_wagtail_tables():
    """Create the missing Wagtail tables that weren't properly created by faking migrations"""
    
    print("üîß Creating missing Wagtail tables in johann schema...")
    
    with schema_context('johann'):
        with connection.cursor() as cursor:
            # Create wagtailusers_userprofile table (the one that's missing)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS wagtailusers_userprofile (
                    id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    submitted_notifications BOOLEAN NOT NULL DEFAULT TRUE,
                    approved_notifications BOOLEAN NOT NULL DEFAULT TRUE,
                    rejected_notifications BOOLEAN NOT NULL DEFAULT TRUE,
                    updated_comments_notifications BOOLEAN NOT NULL DEFAULT TRUE,
                    preferred_language VARCHAR(10) NOT NULL DEFAULT '',
                    current_time_zone VARCHAR(40) NOT NULL DEFAULT '',
                    avatar VARCHAR(100) NOT NULL DEFAULT '',
                    dismissibles JSONB NOT NULL DEFAULT '{}',
                    theme VARCHAR(20) NOT NULL DEFAULT 'system',
                    density VARCHAR(20) NOT NULL DEFAULT 'default',
                    contrast VARCHAR(20) NOT NULL DEFAULT 'default',
                    user_id INTEGER NOT NULL UNIQUE REFERENCES auth_user(id) ON DELETE CASCADE
                );
            """)
            print("‚úÖ Created wagtailusers_userprofile table")
            
            # Create any other potentially missing core tables
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS wagtailcore_collection (
                    id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    path VARCHAR(255) NOT NULL UNIQUE,
                    depth INTEGER NOT NULL CHECK (depth >= 0),
                    numchild INTEGER NOT NULL CHECK (numchild >= 0),
                    name VARCHAR(255) NOT NULL
                );
            """)
            print("‚úÖ Created wagtailcore_collection table")
            
            # Insert default collection if it doesn't exist
            cursor.execute("""
                INSERT INTO wagtailcore_collection (path, depth, numchild, name)
                SELECT '0001', 1, 0, 'Root'
                WHERE NOT EXISTS (SELECT 1 FROM wagtailcore_collection WHERE path = '0001');
            """)
            print("‚úÖ Ensured Root collection exists")
            
            # Create sites table if missing
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS wagtailcore_site (
                    id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    hostname VARCHAR(255) NOT NULL,
                    port INTEGER NOT NULL,
                    site_name VARCHAR(255),
                    root_page_id INTEGER REFERENCES wagtailcore_page(id),
                    is_default_site BOOLEAN NOT NULL DEFAULT FALSE
                );
            """)
            print("‚úÖ Created wagtailcore_site table")
            
            # Create basic page structure if missing
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS wagtailcore_page (
                    id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    path VARCHAR(255) NOT NULL UNIQUE,
                    depth INTEGER NOT NULL CHECK (depth >= 0),
                    numchild INTEGER NOT NULL CHECK (numchild >= 0),
                    title VARCHAR(255) NOT NULL,
                    slug VARCHAR(255),
                    content_type_id INTEGER NOT NULL,
                    live BOOLEAN NOT NULL DEFAULT TRUE,
                    has_unpublished_changes BOOLEAN NOT NULL DEFAULT FALSE,
                    url_path TEXT NOT NULL,
                    owner_id INTEGER,
                    seo_title VARCHAR(255),
                    show_in_menus BOOLEAN NOT NULL DEFAULT FALSE,
                    search_description TEXT,
                    go_live_at TIMESTAMP WITH TIME ZONE,
                    expire_at TIMESTAMP WITH TIME ZONE,
                    expired BOOLEAN NOT NULL DEFAULT FALSE,
                    locked BOOLEAN NOT NULL DEFAULT FALSE,
                    locked_at TIMESTAMP WITH TIME ZONE,
                    locked_by_id INTEGER,
                    first_published_at TIMESTAMP WITH TIME ZONE,
                    last_published_at TIMESTAMP WITH TIME ZONE,
                    latest_revision_id INTEGER,
                    live_revision_id INTEGER,
                    alias_of_id INTEGER,
                    locale_id INTEGER,
                    translation_key UUID,
                    draft_title VARCHAR(255),
                    wagtail_admin_comments TEXT
                );
            """)
            print("‚úÖ Created wagtailcore_page table")
            
    print("\nüéâ All missing Wagtail tables created successfully!")
    print("üåê Try accessing: http://johann.localhost:8001/admin/")
    return True

if __name__ == '__main__':
    try:
        create_missing_wagtail_tables()
        print("\n‚ú® Johann's tenant schema should now be working!")
        print("üìù Login: admin / admin123")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        print("üí° You may need to run this with proper database permissions")